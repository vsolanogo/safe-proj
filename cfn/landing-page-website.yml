AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BitBucketRepo:
    Type: String
  BitBucketBranch:
    Type: String
  BitBucketConnectionArn:
    Type: String
  CFCertificateArn:
    Description: 'Optional Amazon Resource Name (ARN) of the certificate to associate with the cloudfront.'
    Type: String
    Default: 'arn:aws:acm:us-east-1:606515313688:certificate/2b945c44-cda6-4e13-977c-cac97cd67795'
  Stage:
    Description: 'Stage.'
    Type: String
  AlternateDomainNames:
    Description: CNAMEs (alternate domain names), if any, for the distribution. Example. mydomain.com
    Type: String
  Compress:
    Description:    CloudFront Origin Protocol Policy to apply to your origin.
    Type:           String
    Default:        "true"
    AllowedValues:
      - true
      - false
Resources:
  ##########################################
  ##### S3 Bucket
  ##########################################
  Website:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AWS::StackName
      AccessControl: 'PublicRead'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - POST
              - PUT
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - ETag
              - x-amz-meta-custom-header
            MaxAge: 3000
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Website
                - /*
      Bucket: !Ref Website
  ##########################################
  ##### Cloudfront Distribution
  ##########################################
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainNames
        HttpVersion: http2
        Origins:
          -
            # Use the Website as the CDN origin
            DomainName: !GetAtt Website.DomainName
            Id: !Ref Website
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          -
            # English version
            DomainName: !GetAtt Website.DomainName
            OriginPath: /en
            Id: !Join ['', [!Ref Website, "/en"]]
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          -
            # Swedish version
            DomainName: !GetAtt Website.DomainName
            Id: !Join ['', [!Ref Website, "/sv"]]
            OriginPath: /sv
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        CacheBehaviors:
          -
            Compress: !Ref Compress
            PathPattern: /en
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            MinTTL: 86400  # 1 day
            MaxTTL: 31536000  # 1 year
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ## The origin id defined above
            TargetOriginId: !Join ['', [!Ref Website, "/en"]]
            ViewerProtocolPolicy: "redirect-to-https"   # we want to force HTTPS
          -
            Compress: !Ref Compress
            PathPattern: /sv
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            MinTTL: 86400  # 1 day
            MaxTTL: 31536000  # 1 year
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ## The origin id defined above
            TargetOriginId: !Join ['', [!Ref Website, "/sv"]]
            ViewerProtocolPolicy: "redirect-to-https"   # we want to force HTTPS
        Enabled: true
        DefaultRootObject: index.html
        ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
        # Configure the caching behavior for our CDN
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /en/index.html
        DefaultCacheBehavior:
          Compress: !Ref Compress
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          MinTTL: 86400  # 1 day
          MaxTTL: 31536000  # 1 year
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ## The origin id defined above
          TargetOriginId: !Ref Website
          ViewerProtocolPolicy: "redirect-to-https"   # we want to force HTTPS
        ## The certificate to use when viewers use HTTPS to request objects.
        ViewerCertificate:
          AcmCertificateArn: !Ref CFCertificateArn
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: 'TLSv1.1_2016'
  ##########################################
  ##### AWS CodePipeline
  ##########################################
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: App
              InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Owner: AWS
                Category: Source
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref BitBucketConnectionArn
                FullRepositoryId: !Ref BitBucketRepo
                BranchName: !Ref BitBucketBranch
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: ReactServerlessBuild
              Configuration:
                ProjectName: !Ref CodeBuild
  # CodePipeline service role
  CodePipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:*"
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - codestar-connections:ListConnections
                  - codestar-connections:PassConnection
                  - codestar-connections:UseConnection
                Resource: "*"
              - Effect: Allow
                Resource: "*"
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
  # Temp bucket for storing build artifacts
  PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  ##########################################
  ##### AWS CodeBuild
  ##########################################
  CodeBuild:
    DependsOn: Website
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        # The downloaded source code for the build will come from CodePipeline
        Type: CODEPIPELINE
        Name: MyReactServerlessProject
      Environment:
        # Linux container with node installed
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: S3_BUCKET_NAME
            Value: !Ref Website
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub
          - |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  nodejs: 12
              pre_build:
                commands:
                  - echo List directory files...
                  - ls
                  - echo Installing source NPM dependencies...
                  - yarn global add gatsby
                  - yarn
              build:
                commands:
                  - echo List active directory...
                  - ls
                  - echo Generate .env file
                  - printenv > .env
                  - echo Build started on `date`
                  - yarn build
              post_build:
                commands:
                  - echo "Uploading files to s3://${S3_BUCKET_NAME}..."
                  - aws s3 sync --delete public s3://${S3_BUCKET_NAME} --acl public-read --exclude public/index.html
                  - echo "Uploading index.html"
                  - aws s3 cp public/index.html s3://${S3_BUCKET_NAME}/index.html --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --acl public-read
                  - aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
            artifacts:
              files:
                - '**/*'
          - S3_BUCKET_NAME: !Ref Website
            DISTRIBUTION_ID: !Ref Distribution

  # IAM role that allows CodeBuild to interact with S3, CloudWatch, and CloudFront
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:DeleteObject"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
              -
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:DeleteObject"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                Resource:
                  - !GetAtt Website.Arn
                  - !Join ['', [!GetAtt Website.Arn, "/*"]]
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "cloudfront:CreateInvalidation"
                Resource:
                  - "*"
